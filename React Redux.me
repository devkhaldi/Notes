Redux :
======

Three core concepts :
- Store : holds the state of your applicatio
- Action : Describes the changes in the state of app
- Reducer : Carries out the state transition depending on the action

Three priciples:
- The state of your whole application is stored in an object tree within a single store
-The only way to change the state is to emit an action, an object describing what happened
- To specify how the state tree is transformed by actions,you write pure reducers
Reducer - (previewsState,action) => newState

Actions : 
=======

= Action is an object with type property
= Action creator is a function wich return an action

function buyCake() {
  return {
    type: "BUY_CAKE",
    info: "First redux action"
  };
}

Reducer :
========
const initialState = {
  numberOfCakes: 0
};

const reducer = (state = initialState, action) => {
  switch (action.type) {
    case "BUY_CAKE":
      return {
        ...state,
        numberOfCakes: state.numberOfCakes - 1
      };
    default:
      return state;
  }
};

Redux Store :
===========
= Holds application state
= Allows access to state via getState()
= Allows state to be updated via dispatch(action)
= Registers listeners via subscribe(listener)
= Handles unregistering of listeners via the function returned by subscribe(listner)

const redux = require("redux");

const store = redux.createStore(reducer);
console.log("Initial state", store.getState());
const unsubscribe = store.subscribe(() => console.log("Updating state", store.getState()));
store.dispatch({ type: "INCREMENT", value: 10 });
store.dispatch({ type: "DECREMENT", value: 4 });
store.dispatch({ type: "RESET" });

unsubscribe();

Combine reducers :
================

const rootReducer = redux.combineReducers({
  cake: cakeReducer,
  iceCream : iceCreamReducer
})

Middleware:
==========

Is the suggested way to extend Redux with custom functionality
Provides a third-party extension point between dispatching an action,
and the moment it reaches the reducer

npm i --save redux-logger

const reduxLogger = require('redux-logger')

const logger = reduxLogger.createLogger()

const store  = createStore(rootReducer,redux.middleware(logger))


Asyun Actions in redux : 
====================

Synchronous Actions:
As soon as an action was dispatched, the state was immediately updated

Asynchronous Actions :
Asynchronous API calls to fetch data from an API

state = {
	loding : false ,
	data : [] ,
	error : ''
} 

Actions : 

FETCH_USERS_REQUEST - fecth list of users
FETCH_USERS_SUCCESS - fetched successfully
FETCH_USERS_FAILURE - Error while fetching data

redux-thunk : is a middleware that Define async action creators

create action creator fetchUsers 
the thunk middelware give the ability to return a function instead of an action object


const fetchUsers = () => {
	return function(dispatch) {
	
	}
}